resource "tls_private_key" "ca" {
  algorithm   = "RSA"
  rsa_bits    = 4096
}

resource "tls_self_signed_cert" "ca" {
  private_key_pem   = tls_private_key.ca.private_key_pem
  is_ca_certificate = true

  subject {
    common_name  = var.domain_name
    organization = var.org_name
  }

  validity_period_hours = var.validity_period_hours

  allowed_uses = [
    "cert_signing",
    "crl_signing"
  ]
}

resource "tls_private_key" "server" {
  algorithm = "RSA"
}

resource "tls_cert_request" "server" {
  private_key_pem = tls_private_key.server.private_key_pem

  dns_names = ["server.${var.domain_name}"]
  #ip_addresses = ["${var.ip_addresses}"]

  subject {
    common_name  = "server"
    organization = var.org_name
  }
}

resource "tls_locally_signed_cert" "server" {
  cert_request_pem   = tls_cert_request.server.cert_request_pem
  ca_private_key_pem = tls_private_key.ca.private_key_pem
  ca_cert_pem        = tls_self_signed_cert.ca.cert_pem

  validity_period_hours = var.validity_period_hours
  allowed_uses = [
    "key_encipherment",
    "digital_signature",
    "server_auth"
  ]
}

resource "aws_acm_certificate" "server" {
  private_key       = tls_private_key.server.private_key_pem
  certificate_body  = tls_locally_signed_cert.server.cert_pem
  certificate_chain = tls_self_signed_cert.ca.cert_pem
}

resource "aws_security_group" "client_vpn" {
  name        = "${var.name}-sg"
  description = "Allow VPN clients traffic to private networks."
  vpc_id      = var.vpc_id

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = [var.target_cidr]
  }

  tags = merge(var.tags, {
    Name = "${var.name}-sg"
  })
}

resource "aws_cloudwatch_log_group" "main" {
  name              = "${var.name}-log-group"
  retention_in_days = 90

  tags = merge(var.tags, {
    Name = "${var.name}-log-group"
  })
}

resource "aws_cloudwatch_log_stream" "main" {
  name           = "${var.name}-log-stream"
  log_group_name = aws_cloudwatch_log_group.main.name
}

resource "aws_ec2_client_vpn_endpoint" "main" {
  description            = "Client VPN endpoint provisioned by Terraform. Certificates are generated by Terraform TLS provider."
  server_certificate_arn = aws_acm_certificate.server.arn
  client_cidr_block      = var.client_cidr_block
  split_tunnel           = true
  session_timeout_hours  = 8
  self_service_portal    = "enabled"

  vpc_id             = var.vpc_id
  security_group_ids = [aws_security_group.client_vpn.id]

  authentication_options {
    type                           = "federated-authentication"
    saml_provider_arn              = var.saml_provider_arn
    self_service_saml_provider_arn = var.ssp_saml_provider_arn
  }

  connection_log_options {
    enabled               = true
    cloudwatch_log_group  = aws_cloudwatch_log_group.main.name
    cloudwatch_log_stream = aws_cloudwatch_log_stream.main.name
  }

  client_login_banner_options {
    enabled     = true
    banner_text = "Welcome to ${var.org_name} AWS network!"
  }

  tags = merge(var.tags, {
    Name = var.name
  })
}

resource "aws_ec2_client_vpn_network_association" "main" {
  count = length(var.subnets_assoc)

  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.main.id
  subnet_id              = var.subnets_assoc[count.index]
}

resource "aws_ec2_client_vpn_route" "main" {
  count = length(var.subnets_assoc)

  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.main.id
  destination_cidr_block = var.target_cidr
  target_vpc_subnet_id   = var.subnets_assoc[count.index]
}

resource "aws_ec2_client_vpn_authorization_rule" "main" {
  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.main.id
  target_network_cidr    = var.target_cidr
  authorize_all_groups   = true
}
